#!/usr/bin/env python3
"""
Markdown 生成器 - 自动创建中英文版本文档
"""

import os
from pathlib import Path
from datetime import datetime
import re

class MarkdownGenerator:
    def __init__(self, repo_base_url="https://github.com/Angelagoodboy/KK_Archive"):
        """
        初始化生成器
        
        Args:
            repo_base_url: 项目基础URL（用于生成中文版链接）
        """
        self.repo_base_url = repo_base_url.rstrip('/')
        
    def generate_pair(self, content: str, title: str, 
                     original_url: str = "", publish_date: str = "",
                     output_dir: str = "."):
        """
        生成中英文Markdown文件对
        
        Args:
            content: 原始文本内容
            title: 文档标题
            original_url: 原文URL（可选）
            publish_date: 发布日期（可选）
            output_dir: 输出目录（默认当前目录）
        """
        # 确保输出目录存在
        output_path = Path(output_dir)
        output_path.mkdir(exist_ok=True)
        
        # 生成英文版
        en_md = self._generate_en_version(content, title, original_url, publish_date)
        en_filename = f"{self._sanitize_filename(title)}.md"
        en_filepath = output_path / en_filename
        
        # 生成中文版
        cn_md = self._generate_cn_version(en_md, title)
        cn_filename = f"{self._sanitize_filename(title)}_cn.md"
        cn_filepath = output_path / cn_filename
        
        # 写入文件
        with open(en_filepath, 'w', encoding='utf-8') as f:
            f.write(en_md)
        
        with open(cn_filepath, 'w', encoding='utf-8') as f:
            f.write(cn_md)
        
        print(f"✅ 文件生成完成:")
        print(f"   • 英文版: {en_filepath}")
        print(f"   • 中文版: {cn_filepath}")
        print(f"   • 中文版URL: {self._generate_cn_url(title)}")
        
        return en_filepath, cn_filepath
    
    def _generate_en_version(self, content: str, title: str, 
                           original_url: str, publish_date: str) -> str:
        """生成英文版Markdown"""
        if not publish_date:
            publish_date = datetime.now().strftime("%Y-%m-%d")
        
        metadata = self._build_metadata_block(original_url, publish_date, title)
        
        return f"""# {title}

{metadata}

{content}

---

*Document generated by KK Document Processor*
"""

    def _generate_cn_version(self, en_content: str, title: str) -> str:
        """生成中文版Markdown（模拟翻译）"""
        # 这里应该调用翻译API，暂时用简单替换模拟
        cn_title = f"{title}（中文版）"
        
        # 模拟翻译内容
        cn_content = en_content.replace("Document generated by", "文档由").replace("KK Document Processor", "KK文档处理器生成")
        
        return f"""# {cn_title}

{cn_content}
"""

    def _build_metadata_block(self, original_url: str, 
                            publish_date: str, title: str) -> str:
        """构建元数据块"""
        cn_url = self._generate_cn_url(title)
        
        lines = [
            "**Document Information**",
            f"- Original URL: {original_url}" if original_url else "- Original URL: Not provided",
            f"- Publish Date: {publish_date}",
            f"- Chinese Version: [{cn_url}]({cn_url})"
        ]
        return '\n'.join(lines)
    
    def _generate_cn_url(self, title: str) -> str:
        """生成中文版URL"""
        cn_filename = f"{self._sanitize_filename(title)}_cn.md"
        return f"{self.repo_base_url}/blob/main/{cn_filename}"
    
    def _sanitize_filename(self, filename: str) -> str:
        """清理文件名中的特殊字符"""
        return re.sub(r'[\\/*?:"<>|]', "", filename).replace(" ", "_")

# 使用示例
if __name__ == "__main__":
    print("🦊 KK Markdown Generator")
    print("=" * 50)
    
    # 示例内容
    sample_content = """This is a sample document content. 
It contains multiple paragraphs that will be formatted into Markdown.

## Section 1
- Item 1
- Item 2

## Section 2
Main content goes here..."""
    
    generator = MarkdownGenerator()
    
    # 生成中英文文档对
    generator.generate_pair(
        content=sample_content,
        title="Sample Document",
        original_url="https://example.com/original",
        publish_date="2024-01-01",
        output_dir="output_docs"
    )